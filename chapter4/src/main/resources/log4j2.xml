<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，设置间隔秒数-->
<Configuration status="error" monitorInterval="30">
    <!--定义所有的appender-->
    <appenders>
        <!-- 输出控制台的配置 -->
        <console name="Console" target="SYSTEM_OUT">
            <!-- 输出日志的格式 -->
            <!-- PatternLayout：自定义形式显示 -->
            <!-- PatternLayout参数 -->
            <!--
                charset ##指定字符集
                pattern ##指定格式
                alwaysWriteExceptions ##默认为true，输出异常
                header ##可选项。包含在每个日志文件的顶部
                footer ##可选项。包含在每个日志文件的尾部
            -->
            <!-- pattern属性参数格式描述 -->
            <!--
                ######### 常见参数 #########
                %c{参数} 或 %logger{参数}  ##输出日志名称
                %C{参数} 或 %class{参数    ##输出类型
                %d{参数}{时区te{参数}{时区} ##输出时间
                %F|%file                  ##输出文件名
                highlight{pattern}{style} ##高亮显示
                %l  ##输出错误的完整位置
                %L  ##输出错误行号
                %m 或 %msg 或 %message ##输出错误信息
                %M 或 %method ##输出方法名
                %n            ##输出换行符
                %level{参数1}{参数2}{参数3} ##输出日志的级别
                %t 或 %thread              ##创建logging事件的线程名
                %p                        ##日志级别
                ######### 特殊符号 ############
                #有些特殊符号不能直接打印，需要使用实体名称或者编号
                & —— &amp; 或者 &#38;
                < —— &lt;  或者 &#60;
                > —— &gt;  或者 &#62;
                “ —— &quot; 或者 &#34;
                ‘ —— &apos; 或者 &#39;
                ######## pattern对齐修饰 ##########
                ## 对齐修饰，可以指定信息的输出格式，如是否左对齐，是否留空格等。
                ## 编写格式为在任何pattern和%之间加入一个小数，可以是正数，也可以是负数。
                ## 整数表示右对齐，负数表示左对齐；
                ## 整数位表示输出信息的最小n个字符，如果输出信息不够n个字符，将用空格补齐；
                ## 小数位表示输出信息的最大字符数，如果超过n个字符，则只保留最后n个字符的信息
                ## （注意：保留的是后20个字符，而不是前20个字符）
                #示例如下
                %20 —— 右对齐，不足20个字符则在信息前面用空格补足，超过20个字符则保留原信息
                %-20 —— 左对齐，不足20个字符则在信息后面用空格补足，超过20个字符则保留原信息
                %.30 —— 如果信息超过30个字符，则只保留最后30个字符
                %20.30 —— 右对齐，不足20个字符则在信息前面用空格补足，超过30个字符则只保留最后30个字符
                %-20.30 —— 左对齐，不足20个字符则在信息后面用空格补足，超过30个字符则只保留最后30个字符
            -->
            <PatternLayout pattern="%5p %d %C: %m%n"/>
        </console>
    </appenders>

    <!-- 然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <loggers>
        <logger name="com.learn.ssm.chapter4.mapper" level="debug">
        </logger>
        <!-- 建立一个默认的root的logger -->
        <root level="debug">
            <appender-ref ref="Console"/>
        </root>
    </loggers>
</Configuration>